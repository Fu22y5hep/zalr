name: Run All Stages Daily

on:
  schedule:
    # Run at 2:00 AM UTC daily
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering
  push:  # Temporarily add push trigger for testing
    branches:
      - main

jobs:
  run-all-stages:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      
      - name: Install dependencies with uv
        run: |
          uv venv
          uv pip install -r requirements.txt
          uv pip install -e .
      
      - name: Create settings module
        run: |
          # Create a production Django settings module for GitHub Actions
          mkdir -p zalr_backend/settings
          
          # Create an empty __init__.py file instead of trying to import from base
          cat > zalr_backend/settings/__init__.py << 'EOF'
          # Empty init file
          EOF
          
          cat > zalr_backend/settings/github_actions.py << 'EOF'
          # Settings for GitHub Actions environment
          # Standalone settings file - not importing from base
          import os
          import sys
          
          # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
          BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
          
          # Add the project directory to the path so we can import modules
          sys.path.insert(0, BASE_DIR)
          
          # SECURITY WARNING: keep the secret key used in production secret!
          SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'default-if-not-in-env')
          
          # SECURITY WARNING: don't run with debug turned on in production!
          DEBUG = False
          
          ALLOWED_HOSTS = ['*']
          
          # Application definition
          INSTALLED_APPS = [
              'django.contrib.admin',
              'django.contrib.auth',
              'django.contrib.contenttypes',
              'django.contrib.sessions',
              'django.contrib.messages',
              'django.contrib.staticfiles',
              'semantis_app',
              'rest_framework',
              'corsheaders',
          ]
          
          MIDDLEWARE = [
              'django.middleware.security.SecurityMiddleware',
              'django.contrib.sessions.middleware.SessionMiddleware',
              'corsheaders.middleware.CorsMiddleware',
              'django.middleware.common.CommonMiddleware',
              'django.middleware.csrf.CsrfViewMiddleware',
              'django.contrib.auth.middleware.AuthenticationMiddleware',
              'django.contrib.messages.middleware.MessageMiddleware',
              'django.middleware.clickjacking.XFrameOptionsMiddleware',
          ]
          
          ROOT_URLCONF = 'zalr_backend.urls'
          
          TEMPLATES = [
              {
                  'BACKEND': 'django.template.backends.django.DjangoTemplates',
                  'DIRS': [],
                  'APP_DIRS': True,
                  'OPTIONS': {
                      'context_processors': [
                          'django.template.context_processors.debug',
                          'django.template.context_processors.request',
                          'django.contrib.auth.context_processors.auth',
                          'django.contrib.messages.context_processors.messages',
                      ],
                  },
              },
          ]
          
          WSGI_APPLICATION = 'zalr_backend.wsgi.application'
          
          # Database
          DATABASES = {
              'default': {
                  'ENGINE': 'django.db.backends.postgresql',
                  'NAME': 'postgres',
                  'USER': os.getenv('POSTGRES_USER', 'postgres.njrvojczjhsfdlbjqiop'),
                  'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'R8CW-fwkhm5xJt-'),
                  'HOST': os.getenv('POSTGRES_HOST', 'aws-0-eu-central-1.pooler.supabase.com'),
                  'PORT': os.getenv('POSTGRES_PORT', '6543'),
                  'OPTIONS': {
                      'connect_timeout': 10,
                      'options': '-c statement_timeout=15000ms',
                  },
                  'CONN_MAX_AGE': 60,
              }
          }
          
          # Password validation
          AUTH_PASSWORD_VALIDATORS = [
              {
                  'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
              },
              {
                  'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
              },
              {
                  'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
              },
              {
                  'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
              },
          ]
          
          # Internationalization
          LANGUAGE_CODE = 'en-us'
          TIME_ZONE = 'UTC'
          USE_I18N = True
          USE_L10N = True
          USE_TZ = True
          
          # Static files (CSS, JavaScript, Images)
          STATIC_URL = '/static/'
          STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
          
          # AWS settings
          AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID', '')
          AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY', '')
          
          # CORS settings
          CORS_ALLOW_ALL_ORIGINS = True
          
          # Other security settings
          SECURE_SSL_REDIRECT = False
          SESSION_COOKIE_SECURE = False
          CSRF_COOKIE_SECURE = False
          SECURE_BROWSER_XSS_FILTER = True
          X_FRAME_OPTIONS = 'DENY'
          
          # API settings
          REST_FRAMEWORK = {
              'DEFAULT_PERMISSION_CLASSES': [
                  'rest_framework.permissions.AllowAny',
              ],
              'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
              'PAGE_SIZE': 20,
          }
          
          # Required for newer versions of Django
          DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
          EOF
      
      - name: Setup environment
        run: |
          # Create .env file with secrets
          cat > .env << EOF
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_PUBLIC_KEY=${{ secrets.SUPABASE_PUBLIC_KEY }}
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_SETTINGS_MODULE=zalr_backend.settings.github_actions
          EOF
          
          # Export environment variables
          export DJANGO_SETTINGS_MODULE=zalr_backend.settings.github_actions
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          echo "Environment setup complete"
          echo "DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE"
          echo "PYTHONPATH=$PYTHONPATH"
      
      - name: Test Django setup
        run: |
          export DJANGO_SETTINGS_MODULE=zalr_backend.settings.github_actions
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          # Check if Django is configured correctly
          uv run python -c "import django; django.setup(); from django.conf import settings; print(f'Django settings module: {settings.SETTINGS_MODULE}'); print(f'Installed apps: {settings.INSTALLED_APPS}')"
      
      - name: Run pipeline using stage scripts directly
        run: |
          CURRENT_YEAR=$(date +%Y)
          
          # Export environment variables
          export DJANGO_SETTINGS_MODULE=zalr_backend.settings.github_actions
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          # Make scripts executable
          chmod +x stages/stage*.py
          
          echo "Running pipeline for $CURRENT_YEAR using stage scripts directly"
          
          # Run each stage script in sequence
          uv run python stages/stage1_scrape_judgments.py --year $CURRENT_YEAR
          uv run python stages/stage2_fix_metadata.py --year $CURRENT_YEAR
          uv run python stages/stage3_chunk_judgments.py --year $CURRENT_YEAR
          uv run python stages/stage4_generate_embeddings.py --year $CURRENT_YEAR
          uv run python stages/stage5_generate_short_summaries.py --year $CURRENT_YEAR
          uv run python stages/stage6_calculate_reportability.py --year $CURRENT_YEAR
          uv run python stages/stage7_generate_long_summaries.py --year $CURRENT_YEAR
          uv run python stages/stage8_classify_practice_areas.py --year $CURRENT_YEAR
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_PUBLIC_KEY: ${{ secrets.SUPABASE_PUBLIC_KEY }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_SETTINGS_MODULE: zalr_backend.settings.github_actions
      
      - name: Upload logs as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: process-logs
          path: logs/
          retention-days: 7
      
      - name: Fallback if any stage fails
        if: failure()
        run: |
          export DJANGO_SETTINGS_MODULE=zalr_backend.settings.github_actions
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          CURRENT_YEAR=$(date +%Y)
          
          echo "Fallback: Running any stages that might have failed individually with detailed error reporting"
          
          # Try running individual stages with --debug flag for more info
          for stage_script in stages/stage{1..8}_*.py; do
            script_name=$(basename $stage_script)
            echo "Attempting to run $script_name with debug output"
            uv run python $stage_script --year $CURRENT_YEAR --debug || echo "$script_name failed, continuing with next stage"
          done
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_PUBLIC_KEY: ${{ secrets.SUPABASE_PUBLIC_KEY }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_SETTINGS_MODULE: zalr_backend.settings.github_actions 