name: Run All Stages Daily

on:
  schedule:
    # Run at 2:00 AM UTC daily
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering
  push:  # Temporarily add push trigger for testing
    branches:
      - main

jobs:
  run-all-stages:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.12'
          check-latest: false
      
      - name: Test Python version
        run: |
          python --version
          which python
      
      - name: Install uv
        run: |
          pip install uv
      
      - name: Install dependencies
        run: |
          # Explicitly set Python path to the one from setup-python
          export PYTHONPATH=$(which python | xargs dirname)
          
          # Create the virtual environment with explicit Python path
          uv venv --python $(which python)
          source .venv/bin/activate
          
          # Verify Python version in virtual environment
          python --version
          
          # Skip Pillow installation directly
          # We'll modify requirements.txt to exclude it
          cp requirements.txt requirements.original.txt
          grep -v "pillow" requirements.original.txt > requirements.txt
          
          # Install the rest of the requirements
          uv pip install -r requirements.txt
          
          # Install Django explicitly to ensure it's available
          uv pip install django==5.1.4
          
          # Install pgvector for PostgreSQL vector operations
          uv pip install pgvector
          
          # Don't install the local package in editable mode - causes Python version conflicts
          # uv pip install -e .
          
          # Restore original requirements file
          mv requirements.original.txt requirements.txt
          
          # Verify Django installation
          uv pip list | grep django
          
          # Create a test file to check Django import
          cat > test_django.py << EOF
          import os
          import sys
          
          # Print Python path
          print("Python path:", sys.path)
          
          # Try to import django
          try:
              import django
              print(f"Django version: {django.__version__}")
              print(f"Django path: {django.__file__}")
          except ImportError as e:
              print(f"Error importing Django: {e}")
              sys.exit(1)
          
          # Try to setup django with our settings
          try:
              os.environ.setdefault("DJANGO_SETTINGS_MODULE", "zalr_backend.github_actions")
              django.setup()
              print("Django setup successful")
              
              # Test importing settings
              from django.conf import settings
              print(f"Settings module: {settings.SETTINGS_MODULE}")
              print(f"Installed apps: {settings.INSTALLED_APPS}")
          except Exception as e:
              print(f"Error setting up Django: {e}")
              import traceback
              traceback.print_exc()
          EOF
          
          # Run the test
          uv run python test_django.py
      
      - name: Create .env file from secrets
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_PUBLIC_KEY=${{ secrets.SUPABASE_PUBLIC_KEY }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "DJANGO_SETTINGS_MODULE=zalr_backend.github_actions" >> .env
          echo "VOYAGE_API_KEY=${{ secrets.VOYAGE_API_KEY }}" >> .env
      
      - name: Create settings module
        run: |
          # Create a GitHub Actions specific settings file
          cat > zalr_backend/github_actions.py << 'EOF'
          # Settings for GitHub Actions environment
          # Standalone settings file - not importing from base
          import os
          import sys
          
          # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
          BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
          
          # Add the project directory to the path so we can import modules
          sys.path.insert(0, BASE_DIR)
          
          # SECURITY WARNING: keep the secret key used in production secret!
          SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'default-if-not-in-env')
          
          # SECURITY WARNING: don't run with debug turned on in production!
          DEBUG = False
          
          ALLOWED_HOSTS = ['*']
          
          # Application definition
          INSTALLED_APPS = [
              'django.contrib.admin',
              'django.contrib.auth',
              'django.contrib.contenttypes',
              'django.contrib.sessions',
              'django.contrib.messages',
              'django.contrib.staticfiles',
              'semantis_app',
              'rest_framework',
              'corsheaders',
          ]
          
          MIDDLEWARE = [
              'django.middleware.security.SecurityMiddleware',
              'django.contrib.sessions.middleware.SessionMiddleware',
              'corsheaders.middleware.CorsMiddleware',
              'django.middleware.common.CommonMiddleware',
              'django.middleware.csrf.CsrfViewMiddleware',
              'django.contrib.auth.middleware.AuthenticationMiddleware',
              'django.contrib.messages.middleware.MessageMiddleware',
              'django.middleware.clickjacking.XFrameOptionsMiddleware',
          ]
          
          ROOT_URLCONF = 'zalr_backend.urls'
          
          TEMPLATES = [
              {
                  'BACKEND': 'django.template.backends.django.DjangoTemplates',
                  'DIRS': [],
                  'APP_DIRS': True,
                  'OPTIONS': {
                      'context_processors': [
                          'django.template.context_processors.debug',
                          'django.template.context_processors.request',
                          'django.contrib.auth.context_processors.auth',
                          'django.contrib.messages.context_processors.messages',
                      ],
                  },
              },
          ]
          
          WSGI_APPLICATION = 'zalr_backend.wsgi.application'
          
          # Database
          DATABASES = {
              'default': {
                  'ENGINE': 'django.db.backends.postgresql',
                  'NAME': 'postgres',
                  'USER': os.getenv('POSTGRES_USER', 'postgres.njrvojczjhsfdlbjqiop'),
                  'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'R8CW-fwkhm5xJt-'),
                  'HOST': os.getenv('POSTGRES_HOST', 'aws-0-eu-central-1.pooler.supabase.com'),
                  'PORT': os.getenv('POSTGRES_PORT', '6543'),
                  'OPTIONS': {
                      'connect_timeout': 10,
                      'options': '-c statement_timeout=15000ms',
                  },
                  'CONN_MAX_AGE': 60,
              }
          }
          
          # Password validation
          AUTH_PASSWORD_VALIDATORS = [
              {
                  'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
              },
              {
                  'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
              },
              {
                  'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
              },
              {
                  'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
              },
          ]
          
          # Internationalization
          LANGUAGE_CODE = 'en-us'
          TIME_ZONE = 'UTC'
          USE_I18N = True
          USE_L10N = True
          USE_TZ = True
          
          # Static files (CSS, JavaScript, Images)
          STATIC_URL = '/static/'
          STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
          
          # AWS settings
          AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID', '')
          AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY', '')
          
          # CORS settings
          CORS_ALLOW_ALL_ORIGINS = True
          
          # Other security settings
          SECURE_SSL_REDIRECT = False
          SESSION_COOKIE_SECURE = False
          CSRF_COOKIE_SECURE = False
          SECURE_BROWSER_XSS_FILTER = True
          X_FRAME_OPTIONS = 'DENY'
          
          # API settings
          REST_FRAMEWORK = {
              'DEFAULT_PERMISSION_CLASSES': [
                  'rest_framework.permissions.AllowAny',
              ],
              'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
              'PAGE_SIZE': 20,
          }
          
          # Required for newer versions of Django
          DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
          EOF
      
      - name: Run migrations
        run: |
          export DJANGO_SETTINGS_MODULE=zalr_backend.github_actions
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          uv run python manage.py migrate
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_PUBLIC_KEY: ${{ secrets.SUPABASE_PUBLIC_KEY }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_SETTINGS_MODULE: zalr_backend.github_actions
          VOYAGE_API_KEY: ${{ secrets.VOYAGE_API_KEY }}
      
      - name: Setup environment
        run: |
          # Export environment variables
          export DJANGO_SETTINGS_MODULE=zalr_backend.github_actions
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          echo "Environment setup complete"
          echo "DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE"
          echo "PYTHONPATH=$PYTHONPATH"
      
      - name: Test Django setup
        run: |
          export DJANGO_SETTINGS_MODULE=zalr_backend.github_actions
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          # Check if Django is configured correctly
          uv run python -c "import django; django.setup(); from django.conf import settings; print(f'Django settings module: {settings.SETTINGS_MODULE}'); print(f'Installed apps: {settings.INSTALLED_APPS}')"
      
      - name: Run pipeline using wrapper script
        run: |
          CURRENT_YEAR=$(date +%Y)
          
          # Export environment variables
          export DJANGO_SETTINGS_MODULE=zalr_backend.github_actions
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          echo "Running all stages for $CURRENT_YEAR using wrapper script"
          uv run python run_stages_wrapper.py --year $CURRENT_YEAR
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_PUBLIC_KEY: ${{ secrets.SUPABASE_PUBLIC_KEY }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_SETTINGS_MODULE: zalr_backend.github_actions
          VOYAGE_API_KEY: ${{ secrets.VOYAGE_API_KEY }}
      
      - name: Upload logs as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: process-logs
          path: logs/
          retention-days: 7
      
      - name: Fallback to individual stages if wrapper fails
        if: failure()
        run: |
          export DJANGO_SETTINGS_MODULE=zalr_backend.github_actions
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          CURRENT_YEAR=$(date +%Y)
          
          echo "Fallback: Running stages individually with debug output"
          
          # Run each stage individually
          for stage_num in {1..8}; do
            echo "Running stage $stage_num with debug output"
            uv run python run_stages_wrapper.py --year $CURRENT_YEAR --stage $stage_num --debug || echo "Stage $stage_num failed, continuing with next stage"
          done
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_PUBLIC_KEY: ${{ secrets.SUPABASE_PUBLIC_KEY }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_SETTINGS_MODULE: zalr_backend.github_actions
          VOYAGE_API_KEY: ${{ secrets.VOYAGE_API_KEY }}
      
      # Add a step to check what's in the virtual environment
      - name: Check virtual environment
        run: |
          ls -la .venv/lib/python*/site-packages/ | grep -i django
          # See if Django is in the Python path
          uv run python -c "import sys; print(sys.path)" 